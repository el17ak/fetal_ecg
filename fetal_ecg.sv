//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

import fp_double::*;

module fetal_ecg(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// SW //////////
	input 		     [7:0]		SW,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		     [1:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N,

	//////////// EPCS //////////
	//output		          		EPCS_ASDO,
	//input 		          		EPCS_DATA0,
	//output		          		EPCS_DCLK,
	//output		          		EPCS_NCSO,

	//////////// Accelerometer and EEPROM //////////
	//output		          		G_SENSOR_CS_N,
	//input 		          		G_SENSOR_INT,
	//output		          		I2C_SCLK,
	//inout 		          		I2C_SDAT,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	//inout 		    [33:0]		GPIOA,
	//input 		     [1:0]		GPIOA_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	//inout 		    [33:0]		GPIOB,
	//input 		     [1:0]		GPIOB_IN,
	
	input integer scale,
	input logic clk,
	input logic rst_n,
	input logic strt,
	output logic outer,
	output logic valid
);

//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

	localparam SIZE_N = 8;

	logic signed[64-1:0] mat_a[368][8];
	logic signed[22-1:0] mat_b[32][8];
	logic signed[64-1:0] mat_out[8][32];
	logic signed[22-1:0] mat_c[8][32];

	read_mat_file #(.NAME("filename.txt"), .TYPE(0), .SIZE_A(368), .SIZE_B(8), .BITS(64)) rf0(.out_matrix(mat_a), .clk(clk));
	transpose_mat #(.SIZE_A(8), .SIZE_B(32), .N_BITS(22)) tp0 (.mat(mat_c), .mat_out(mat_b));	
	//whiten #(.SIZE_A(8), .SIZE_B(32), .N_BITS(22)) wh(.clk(clk), .rst(rst_n), .mat(mat_c), .mat_out(mat_out), .scale(scale));

	double mat_cov[SIZE_N][SIZE_N];
	double mat_eigvalue[1][1];
	double mat_eigvec[SIZE_N][1];
	double mat_cov_out[SIZE_N][SIZE_N];
	
	genvar i,j;
	generate
		for(i = 0; i < SIZE_N; i++) begin: outer_uns
			for(j = 0; j < SIZE_N; j++) begin: inner_uns
				assign mat_cov[i][j][51:0] = unsigned'(mat_a[i][j][51:0]);
				assign mat_cov[i][j][63:52] = 12'd1024;
			end
		end
	endgenerate
	
	assign outer = &(mat_cov_out[0][0]);
	
	eigenprocess #(.SIZE_N(8), .MAX_ITER(100)) fe(
		.clk(clk),
		.rst(rst_n),
		.start(strt),
		.cov_matrix(mat_cov),
		.eigenvalue(mat_eigvalue),
		.eigenvector(mat_eigvec),
		.cov_matrix_out(mat_cov_out),
		.f(valid)
	);
	
	//config_adc cf0();
	
	//collect_adc_data cd0(.SDATA(), .CASCOUT(), .CASCIN(), .SCLK(), .RFS(), .mat_out());

	//accumulate_adc_data ac0();
	
	//integer matrix_a[368][8];
	//integer matrix_b[8][8] = '{default:0};
	//integer matrix_b[8][368];
	//integer matrix_out[8][368];
	
	//read_mat_file #(.NAME("filename.txt"), .TYPE(0), .SIZE_A(368), .SIZE_B(8)) rf0(.out_matrix(matrix_a), .clk(clk));
	//read_mat_file #(.NAME("testfile2.txt"), .TYPE(0), .SIZE_A(8), .SIZE_B(8)) rf1(.out_matrix(matrix_b));
	
	//scalar_multiply_mat #(.SIZE_A(8), .SIZE_B(8)) tb0(.scale(5), .mat(matrix_in), .mat_out(matrix_out));

	//multiply_mat #(.SIZE_A(8), .SIZE_B(8), .SIZE_C(8)) mp0(.mat_a(matrix_a), .mat_b(matrix_b), .mat_out(matrix_out));
	
	//transpose_mat #(.SIZE_A(368), .SIZE_B(8)) tp0 (.mat(matrix_a), .mat_out(matrix_b));

	//whiten #(.SIZE_A(8), .SIZE_B(368)) wh0(.clk(clk), .mat(matrix_b), .mat_out(matrix_out), .rst(rst_n));
	
endmodule
